---
description: 
globs: **/api/mcp/**/*.ts, **/lib/mcp/**/*.ts, **/server/mcp/**/*.ts
alwaysApply: false
---
---
description: Model Context Protocol Implementation Guidelines
globs: **/api/mcp/**/*.ts, **/lib/mcp/**/*.ts, **/server/mcp/**/*.ts, **/api/context/**/*.ts
alwaysApply: false
---
You are implementing a Model Context Protocol (MCP) server for AI agent knowledge persistence.

API Structure
- Create RESTful endpoints with these exact URL patterns:
  - GET /api/context/entity/[id] - Single entity retrieval with optional depth
  - GET /api/context/related/[id] - Related entities with filtering
  - POST /api/context/search - Semantic search with relevance scoring
  - GET /api/context/file/[path] - File-based context retrieval
  - POST /api/context/similarity - Entity similarity scoring
- Implement status codes: 200 (success), 400 (validation error), 404 (not found), 500 (server error)
- Use TypeScript interfaces for all request/response models
- Structure responses as: { data, metadata: { count, filters }, error }
- Include pagination (limit, offset) with total count for list endpoints
- Validate all inputs with zod schemas

Knowledge Graph Operations
- Use DuckDB with these specific connection patterns:
```typescript
import { Database } from 'duckdb-async';
import path from 'path';

export async function getDb() {
  const db = await Database.create(path.join(process.cwd(), 'data/knowledge.db'));
  return db;
}

export async function query<T>(sql: string, params: any[] = []): Promise<T[]> {
  const db = await getDb();
  try {
    return await db.all(sql, params);
  } finally {
    await db.close();
  }
}
```
- Use parameterized queries with ? placeholders (not $1, $2)
- Create indexes for entity_id, project_id, and entity_type columns
- Implement transactions for multi-entity operations with proper error handling

Context Retrieval Implementation
- Use this exact relevance scoring formula:
```sql
CASE 
  WHEN LOWER(e.name) = LOWER(?) THEN 3.0
  WHEN LOWER(e.name) LIKE LOWER(?) THEN 2.0
  WHEN e.entity_type = ? THEN 1.5
  ELSE 1.0
END + (e.confidence * 0.5) + (JULIANDAY(e.updated_at) - JULIANDAY('2020-01-01')) / 365.0 AS relevance
```
- Allow filtering with SQL conditions like:
```sql
WHERE
  (? IS NULL OR e.project_id = ?) AND
  (? IS NULL OR e.entity_type IN (${entityTypeParams})) AND
  (? IS NULL OR e.confidence >= ?)
```
- Implement relationship traversal with recursive CTEs and explicit depth limits

Entity Models
- Use these exact entity schema definitions:
```sql
CREATE TABLE IF NOT EXISTS entities (
  id VARCHAR PRIMARY KEY,
  name VARCHAR NOT NULL,
  entity_type VARCHAR NOT NULL,
  project_id VARCHAR NOT NULL,
  confidence REAL DEFAULT 1.0,
  metadata JSON,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (project_id) REFERENCES projects(id)
);
CREATE INDEX IF NOT EXISTS idx_entities_project ON entities(project_id);
CREATE INDEX IF NOT EXISTS idx_entities_type ON entities(entity_type);
```

Relationship Implementation
- Define relationships with these exact schema definitions:
```sql
CREATE TABLE IF NOT EXISTS relationships (
  id VARCHAR PRIMARY KEY,
  from_entity_id VARCHAR NOT NULL,
  to_entity_id VARCHAR NOT NULL,
  relation_type VARCHAR NOT NULL,
  confidence REAL DEFAULT 1.0,
  metadata JSON,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (from_entity_id) REFERENCES entities(id),
  FOREIGN KEY (to_entity_id) REFERENCES entities(id)
);
CREATE INDEX IF NOT EXISTS idx_rel_from ON relationships(from_entity_id);
CREATE INDEX IF NOT EXISTS idx_rel_to ON relationships(to_entity_id);
CREATE INDEX IF NOT EXISTS idx_rel_type ON relationships(relation_type);
```

Response Processing
- Process query results with proper relationship nesting:
```typescript
function processEntity(entity: any): Entity {
  return {
    id: entity.id,
    name: entity.name,
    entity_type: entity.entity_type,
    confidence: entity.confidence,
    project_id: entity.project_id,
    metadata: entity.metadata ? JSON.parse(entity.metadata) : {},
    created_at: entity.created_at,
    updated_at: entity.updated_at,
    relationships: [], // Will be populated if relationships are included
    observations: []   // Will be populated if observations are included
  };
}
```